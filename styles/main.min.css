/*!
 * FrontendCubie
 * 
 * 
 * @author Pierre Fritsch <fritsch@puzzle.ch>
 * @version 1.0.0
 * Copyright 2017. apache 2.0 licensed.
 */
img,legend{border:0}.map,sub,sup{position:relative}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;src:local('Open Sans'),local('OpenSans'),url(https://fonts.gstatic.com/s/opensans/v13/cJZKeOuBrn4kERxqtaUH3aCWcynf_cDxXwCLxiixG1c.ttf) format('truetype')}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent;color:#397c42}a:active,a:hover{outline:0;color:#8BA124}abbr[title]{border-bottom:1px dotted}b,optgroup,strong{font-weight:700}dfn{font-style:italic}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}pre,textarea{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}.h1,.h2,body,h1,h2{margin:0;font-size:16px}legend,td,th{padding:0}legend{}table{border-collapse:collapse;border-spacing:0}*{box-sizing:border-box}html{-webkit-font-smoothing:antialiased}body{font-family:'Open Sans',Helvetica,Arial,Sans-Serif;color:#444;background:#fff}.h1,.h2,h1,h2{padding:0}.h3,.h4,.h5,.h6,h3,h4,h5,h6{font-size:16px}p{margin-bottom:0}.button,a.button,button.button{display:inline-block;padding:.3125rem .75rem;background-color:#f5f9e4;border:none;border-radius:2px;color:#333;font-size:.875rem;line-height:1.5rem;white-space:nowrap;vertical-align:middle;text-decoration:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:all .3s ease-in-out;-webkit-appearance:none}.button:active,.button:focus,.button:focus:hover,.button:hover,a.button:active,a.button:focus,a.button:focus:hover,a.button:hover,button.button:active,button.button:focus,button.button:focus:hover,button.button:hover{color:#000;background-color:#f5f5f5;box-shadow:0 0 6px rgba(0,0,0,.4)}.button.is-big,a.button.is-big,button.button.is-big{padding:.6875rem 1.5rem;font-size:1.125rem}.announcement{background-color:#eef4d0}[id*=" icon"] path,[id^=icon] path{fill:currentColor}[class*=" icon"],[class^=icon]{display:inline-block;width:1.5rem;height:1.5rem;fill:currentColor}.about,.nav-horizontal ul{display:-webkit-flex;display:-ms-flexbox}[class*=" icon"].is-inline,[class^=icon].is-inline{float:left;margin-right:.375rem}.nav-horizontal ul{list-style:none;margin:0;padding:0;display:flex;-webkit-flex-flow:column wrap;-ms-flex-flow:column wrap;flex-flow:column wrap;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end}.nav-horizontal li{margin-top:.0625rem}@media (min-width:40em),(min-width:8){.nav-horizontal ul{-webkit-flex-flow:row wrap;-ms-flex-flow:row wrap;flex-flow:row wrap;padding:0}.nav-horizontal li{margin-top:0;margin-left:.0625rem}}.nav-horizontal li:first-child{margin:0}.nav-horizontal a{display:block;padding:.75rem;background:#418D4B;color:#fff;text-decoration:none;transition:background-color .3s ease}.devices-title,.nav-horizontal a:hover{background-color:#8BA124}@media (min-width:40em),(min-width:8){.nav-horizontal a{padding:.375rem .75rem}}.section{padding:1rem}@media (min-width:60em),(min-width:12){.section{padding:3rem}}.about{display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:0}@media (min-width:60em),(min-width:12){.about{padding:2rem 2rem 0}}.about-item{-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;width:20em;padding:1rem 1rem 0}.devices-list{display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.devices-title{margin:0;color:#fff;padding:1rem}.header,.map{margin-top:1em}.block,.device-item{background-color:#eef4d0}@media (min-width:60em),(min-width:12){.devices-title{padding:1rem 3rem}}.device-item{color:#444;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;width:20em;border-bottom:1px solid #8BA124;padding:1rem}@media (min-width:60em),(min-width:12){.device-item{padding:1rem 3rem}}.device-item__title{font-weight:700}.device-item__os-version,.device-item__screen-size{font-size:.9em}.device-item__donator{font-size:.7em;color:#777}.block{padding:1em}.map{height:30em;height:50vh;width:100%}.map iframe{position:absolute;top:0;right:0;bottom:0;left:0}.scrolling .map{pointer-events:none}.grid-container{max-width:940px;margin-left:auto;margin-right:auto;padding:0 1.25rem}.grid-container:after{content:" ";display:block;clear:both}@media (min-width:60em),(min-width:12){.grid-container{padding:0}}.header{width:100%;text-align:center}.header__logo{padding-left:22px;position:relative}.header__text{color:#fff;background-color:#8BA124;margin:0;text-align:left;padding:1rem}.header__cta{margin:1rem 0 0}@media (min-width:40em),(min-width:8){.header__cta{float:right;margin:1rem 0 0 1.5rem}}.header__image-container{margin-top:-3.5em;max-height:20em;overflow:hidden;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-ms-flex-align:center;align-items:center}.header__image{overflow:hidden;vertical-align:center;width:100%;height:auto}h1.header__title{font-size:1.6em}@media (min-width:60em),(min-width:12){.header__text{padding:3rem}h1.header__title{font-size:2em}}.is-hidden{position:absolute;visibility:hidden;height:0;width:0}
/*# sourceMappingURL=data:application/json;base64, */
